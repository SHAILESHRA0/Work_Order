generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

enum Role {
  admin
  manager
  hod
  supervisor
  technician
  engineer
  user
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum WorkOrderStatus {
  PENDING
  APPROVED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ON_HOLD
  CANCELLED
  ISSUE_REPORTED
  NEEDS_REVIEW
}

enum Department {
  ELECTRICAL
  MECHANICAL
  ELECTRONICS
  MAINTENANCE
  OPERATIONS
  PRODUCTION
  QUALITY
  IT
  GENERAL
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  name       String
  password   String
  role       Role        @default(user)
  department Department?
  isActive   Boolean     @default(true)
  lastLogin  DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sessions   Session[] // Add this line to handle sessions

  // Relations
  createdOrders    WorkOrder[] @relation("CreatedByRelation")
  assignedOrders   WorkOrder[] @relation("AssignedToRelation")
  supervisedOrders WorkOrder[] @relation("SupervisedByRelation")
  assignedTasks    Task[]      @relation("TaskAssignee")
  comments         Comment[]   @relation("CommentAuthor")
  history          History[]   @relation("HistoryAuthor")
  statusUpdates    StatusHistory[] @relation("StatusUpdatedBy") // Add this line

  @@index([role, isActive, department])
  @@map("users")
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model WorkOrder {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber    String          @unique
  title          String
  description    String
  department     Department
  priority       Priority        @default(MEDIUM)
  status         WorkOrderStatus @default(PENDING)
  startDate      DateTime
  dueDate        DateTime
  completedDate  DateTime?
  equipment      String?
  version        Int             @default(1)
  estimatedHours Float?
  actualHours    Float?

  // Assignment fields  
  createdById  String  @db.ObjectId
  assignedToId String? @db.ObjectId
  supervisorId String? @db.ObjectId

  // Relations
  createdBy    User  @relation("CreatedByRelation", fields: [createdById], references: [id])
  assignedTo   User? @relation("AssignedToRelation", fields: [assignedToId], references: [id])
  supervisedBy User? @relation("SupervisedByRelation", fields: [supervisorId], references: [id])

  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId String?  @db.ObjectId

  tasks              Task[]
  comments           Comment[]
  attachments        Attachment[]
  history            History[]
  maintenanceDetails MaintenanceDetails?
  statusHistory      StatusHistory[] // Add this new relation

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([status, department, assignedToId])
  @@map("workorders")
}

model Vehicle {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  model        String
  licensePlate String      @unique
  workOrders   WorkOrder[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("vehicles")
}

model Task {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId   String          @db.ObjectId
  description   String
  status        WorkOrderStatus @default(PENDING)
  priority      Priority        @default(MEDIUM)
  estimatedTime Float?
  actualTime    Float?
  completedAt   DateTime?
  assignedToId  String?         @db.ObjectId

  workOrder  WorkOrder @relation(fields: [workOrderId], references: [id])
  assignedTo User?     @relation("TaskAssignee", fields: [assignedToId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId String @db.ObjectId
  content     String
  authorId    String @db.ObjectId

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id])
  author    User      @relation("CommentAuthor", fields: [authorId], references: [id])
  createdAt DateTime  @default(now())
}

model Attachment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId String    @db.ObjectId
  filename    String
  path        String
  type        String // e.g., "image", "document", etc.
  size        Int // in bytes
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  uploadedAt  DateTime  @default(now())
}

model History {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId String   @db.ObjectId
  authorId    String   @db.ObjectId
  action      String // CREATE, UPDATE, etc.
  changes     Json // JSON object of changes
  createdAt   DateTime @default(now())

  workOrder WorkOrder @relation(fields: [workOrderId], references: [id])
  author    User      @relation("HistoryAuthor", fields: [authorId], references: [id])
}

model MaintenanceDetails {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId   String    @unique @db.ObjectId
  requiredParts String[]
  safetyTools   String[]
  procedures    String[]
  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id])
}

model StatusHistory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  workOrderId String    @db.ObjectId
  status      WorkOrderStatus
  updatedById String    @db.ObjectId
  comments    String?
  updatedAt   DateTime  @default(now())
  
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  updatedBy   User      @relation("StatusUpdatedBy", fields: [updatedById], references: [id])

  @@map("status_history")
}
